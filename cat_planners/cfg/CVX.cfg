#!/usr/bin/env python
PACKAGE = "cat_planners"
from dynamic_reconfigure.parameter_generator_catkin import *
gen = ParameterGenerator()

#gen.add("int_param", int_t, 0, "An Integer parameter", 50, 0, 100)
#gen.add("double_param", double_t, 0, "A double parameter", .5, 0, 1)
#gen.add("str_param", str_t, 0, "A string parameter", "Hello World")
#gen.add("bool_param", bool_t, 0, "A Boolean parameter", True)


gen.add("max_proxy_states",         int_t,  1, "Max states (iterations) to propagate through.",   20,  0,  100)
gen.add("state_skipping",           int_t,  1, "Keep at most every k states (or those in collision)",   3,  1,  10)
gen.add("proxy_joint_tolerance", double_t,  1, "Joint tolerance for reaching constrained goal.", 0.001,  0.000001,  0.1)
gen.add("max_linear_error",      double_t,  1, "Clipping value for translational error, in meters",  0.02,  0,  0.20)
gen.add("max_angle_error",       double_t,  1, "Clipping value for rotation error, in radians",     0.175,  0,  2)
#gen.add("quantization_step",     double_t,  1, "Step proportion while moving proxy", 0.26, 0.1, 1)
gen.add("xdot_error_weight",   double_t,  1, "Objective weight for minimizing translational error",  2,  0,  1000)
gen.add("wdot_error_weight",   double_t,  1, "Objective weight for minimizing rotational error",     1,  0,  1000)
gen.add("velocity_constraint_only", bool_t,  1, "Use velocity constraint vs. (position + velocity) constraint.", True)

gen.add("min_retreat",           double_t,  1, "Minimum distance to retreat from collisions.", 0, 0, 0.02)
gen.add("refine_normals",          bool_t,  1, "Refine octomap normals using metaball surface", True)
gen.add("max_contacts",             int_t,  1, "Max contacts requested from collision detector",   10,  0,  50)
gen.add("bbx_search_size",       double_t,  1, "BBX search radius, as a proportion of cell size",   1.5,  0.5,  2)
gen.add("min_angle_change",      double_t,  1, "Minimum angular difference for which a normal will be changed.",   0.5,  0.0,  3.15)
gen.add("minimum_reserve_time",  double_t,  1, "How much time to reserve for wrapping up.",   0.004,  0,  0.015)

gen.add("delta_q_weight",      double_t,  1, "Objective weight for minimizing joint step size",   0.00001,  0,  1000)
gen.add("individual_q_weight",   bool_t,  1, "If true, use individual weights for q_error", False)
gen.add("delta_q_w_0",      double_t,  1, "Objective weight for minimizing joint step size",   0.0001,  0,  1000)
gen.add("delta_q_w_1",      double_t,  1, "Objective weight for minimizing joint step size",   0.0001,  0,  1000)
gen.add("delta_q_w_2",      double_t,  1, "Objective weight for minimizing joint step size",   0.0001,  0,  1000)
gen.add("delta_q_w_3",      double_t,  1, "Objective weight for minimizing joint step size",   0.0001,  0,  1000)
gen.add("delta_q_w_4",      double_t,  1, "Objective weight for minimizing joint step size",   0.0001,  0,  1000)
gen.add("delta_q_w_5",      double_t,  1, "Objective weight for minimizing joint step size",   0.0001,  0,  1000)
gen.add("delta_q_w_6",      double_t,  1, "Objective weight for minimizing joint step size",   0.0001,  0,  1000)
gen.add("cvx_eps",          double_t,  1, "Duality gap bound for cvx solver convergence",   0.0001,  0.000001,  0.1)
gen.add("cvx_tol",          double_t,  1, "Constraint residual tolerance for convergence",   0.000001,  0.000000001,  0.1)

#teleop_enum = gen.enum([ gen.const("TELEOP_DISABLE", int_t, 0, "Disable"),
#                       gen.const("TELEOP_JT",      int_t, 1, "J-Transpose"),
#                       gen.const("TELEOP_IK",      int_t, 2, "Inverse Kinematics"),
#                       gen.const("TELEOP_MP",      int_t, 3, "Motion Planning"),
#                       gen.const("TELEOP_CVX",     int_t, 4, "Optimization") ],
#                  "An enum to set teleop mode")
#
#gen.add("teleop_mode", int_t, 16, "The mode for teleoperation", 0, 0, 4, edit_method=teleop_enum)


exit(gen.generate(PACKAGE, PACKAGE, "CVX"))


